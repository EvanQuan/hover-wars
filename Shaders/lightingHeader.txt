
layout (location = 0) out vec4 vFragColor;
layout (location = 1) out vec4 vBrightColor;

struct Material {
	sampler2D vDiffuse;
	sampler2D vSpecular;
	float fShininess;
};

layout (std140, binding = 0) uniform Matrices
{
	mat4 projection;
	mat4 modelview;
	mat4 modelviewInv;
	mat4 dirLightSpaceMat;
	mat4 spotLightSpaceMat[4];
};

// Defaulted to Chrome
uniform Material sMaterial;
in vec2 TexCoords;

// Algorithm derived from:
//	https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping
float ShadowCalculation( vec4 vFragPosLightSpace, sampler2D sShadowMap, float fLightDotNormal )
{
	// Shadow Bias to counter Shadow Acne
	float fBias = 0.0005;
	int iRange = 3;
	float fDivisor = 49.0;
	
	// Perspective Division
	vec3 vProjCoords = vFragPosLightSpace.xyz / vFragPosLightSpace.w;
	
	// transform to [0, 1] range
	vProjCoords = vProjCoords * 0.5 + 0.5;

	// Compute Return Shadow Value
	float fReturnShadow = 0.0;
	
	vec2 texelSize = 1.0 / textureSize(sShadowMap, 0);
	for( int iX = -iRange; iX <= iRange; ++iX )
	{
		for( int iY = -iRange; iY <= iRange; ++iY )
		{
			float pcfDepth = texture(sShadowMap, vProjCoords.xy + vec2(iX, iY) * texelSize).r;
			fReturnShadow += (vProjCoords.z - fBias > pcfDepth ? 1.0 : 0.0);
		}
	}
	
	// Get average of kernel
	fReturnShadow /= fDivisor;
	
	// Clamp the outside of the frustrum
	if( vProjCoords.z > 1.0 )
		fReturnShadow = 0.0;
	
	// Check whether current frag position is in shadow
	return fReturnShadow;
}

// Calculates information about a specified directional light.
vec3 CalcDirLight( DirLight light, vec3 vNormal, vec3 vToCamera, vec4 vShadowFragPos )
{	
	mat3 normalMatrix = transpose(inverse(mat3(modelview)));
	vec3 vLightDirection = normalize( normalMatrix * light.vDirection );
	
	vec3 vToLight = normalize( -vLightDirection );
	
	float lambertian = max(dot(vToLight, vNormal), 0.0);
	float specular = 0.0;
	
	if( lambertian > 0.0 )
	{
		// Blinn-Phong Calculation
		vec3 vHalfDir = normalize( vToLight + vToCamera );
		float specAngle = max( dot( vHalfDir, vNormal), 0.0);
		specular = pow( specAngle, sMaterial.fShininess );
	}
	
	// Get shadow value
	float shadowValue = 1.0 - ShadowCalculation( vShadowFragPos, DirectionalLightShadow, dot(vToLight, vNormal) );

	// Apply Diffuse Value
	vec3 colorLinear = texture( sMaterial.vDiffuse, TexCoords ).rgb * (shadowValue * lambertian * light.vDiffuse);
	
	// Apply Specular value
	colorLinear += texture(sMaterial.vSpecular, TexCoords ).rgb * (shadowValue * specular * light.vSpecular);

	// Apply Ambient Value
	colorLinear += texture(sMaterial.vDiffuse, TexCoords ).rgb * light.vAmbient;
	
	return colorLinear;
}

// Calculate information about a given point light with the current Frag Position
//	Using a Blinn-Phong calculation adapted from goo.gl/vzRHX2 (Wikipedia)
vec3 CalcPointLight( PointLight light, vec3 vNormal, vec3 vFragPos, vec3 vToCamera )
{
	vec4 lightCameraSpace = modelview * vec4(light.vPosition, 1.0);
	lightCameraSpace /= lightCameraSpace.w;
	
	vec3 vToLight = lightCameraSpace.xyz - vFragPos;
	float distance = length(vToLight);
	vToLight = normalize(vToLight);
	
	float lambertian = max(dot(vToLight, vNormal), 0.0);
	float specular = 0.0;
	
	if( lambertian > 0.0 )
	{
		// Blinn-Phong Calculation
		vec3 vHalfDir = normalize( vToLight + vToCamera );
		float specAngle = max( dot( vHalfDir, vNormal), 0.0);
		specular = pow( specAngle, sMaterial.fShininess );
	}

	// Apply Diffuse Value
	vec3 colorLinear = texture( sMaterial.vDiffuse, TexCoords ).rgb * (lambertian * light.vColor * light.fLightPower);
	
	// Apply Specular value
	colorLinear += texture(sMaterial.vSpecular, TexCoords ).rgb * (specular * light.vColor * light.fLightPower);
	
	colorLinear *= 1.0 / (distance * distance);

	return colorLinear;
}

vec3 CalcSpotLight( SpotLight light, vec3 vNormal, vec3 vFragPos, vec3 vToCamera )
{
	// Convert the Camera to view space
	vec4 lightCameraSpace = modelview * vec4(light.vPosition, 1.0);
	lightCameraSpace /= lightCameraSpace.w;
	
	// Get To Light vector as well as distance from Fragment to Light.
	vec3 vToLight = lightCameraSpace.xyz - vFragPos;
	float fDist = length(vToLight);
	vToLight = normalize( vToLight );
	
	mat3 normalMatrix = transpose(inverse(mat3(modelview)));
	vec3 vLightDirection = normalize( normalMatrix * light.vDirection );
	
	// Return Values
	vec3 colorLinear = vec3(0.0);
	
	// Calculate angle of Light to FragPos and SpotLight direction to determine if fragment lies within spotlight.
	float fTheta = dot( vLightDirection, -vToLight );
	
	if( fTheta > light.fCosPhi )
	{
		// Intensity for soft edge dropoff
		float fIntensity = clamp((fTheta - light.fCosPhi)/(light.fCosCutoff - light.fCosPhi), 0.0, 1.0);
		float lambertian = max(dot(vToLight, vNormal), 0.0);
		float specular = 0.0;
		
		if( lambertian > 0.0 )
		{
			// Blinn-Phong Calculation
			vec3 vHalfDir = normalize( vToLight + vToCamera );
			float specAngle = max( dot( vHalfDir, vNormal), 0.0);
			specular = pow( specAngle, sMaterial.fShininess );
		}

		// Apply Diffuse Value
		colorLinear = texture( sMaterial.vDiffuse, TexCoords ).rgb * (lambertian * light.vColor);
		
		// Apply Specular value
		colorLinear += texture(sMaterial.vSpecular, TexCoords ).rgb * (specular * light.vColor);
		
		// Apply Intensity modifier
		colorLinear *= fIntensity;
	}
	
	return colorLinear;
}

void calcBrightColor( vec4 vFragmentColor )
{
	//float fBrightness = dot(vFragmentColor.rgb, vec3(0.2126, 0.7152, 0.0722));
	float fBrightness = (THRESHOLD.r * vFragmentColor.r) + 
						(THRESHOLD.g * vFragmentColor.g) + 
						(THRESHOLD.b * vFragmentColor.b);
	
	if( fBrightness > 0.6 )
		vBrightColor = vec4(vFragmentColor.rgb, 1.0);
	else
	{
		vBrightColor = vec4(0.0, 0.0, 0.0, 1.0);
	
		//vBrightColor = vec4( vec3(fBrightness), 1.0);
	}
}


