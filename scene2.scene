# ============================================================
# Scene file for rendering
#
# Instructions for reading this file:
#   - lines beginning with ‘#’ are comments
#   - all positions are expressed in world coords
#
# ============================================================
# Lighting Instructions
#
# Lights can be described as:
#		point_light 		{ x y z  r g b  p } 
#			- "x y z" 	= the Position of the light in World Space
#			- "r g b" 	= the color of the light
#			- "p"		= power of the light
#		directional_light 	{ dX dY dZ aR aG aB dR dG dB sR sG sB }
#			- "dX dY dZ" = the direction of the light source
#			- "aR aG aB" = the ambient color of the light source
#			- "dR dG dB" = the diffuse color of the light source
#			- "sR sG sB" = the specular color of the light source
#		spotlight 			{ x y z  dX dY dZ  r g b  Phi  *softPhi* }
#			- "x y z"		= the position of the light source
#			- "dX dY dZ"	= the direction of the spotlight
#			- "r g b"		= the color of the spotlight
#			- "Phi"			= the cutoff angle (in degrees) specifying the radius of the spotlight 		
#			- "*softPhi*"	= (Optional) a degree from the cutoff angle to smooth out hard edges, default is 5
#
# ============================================================
# Object Instructions
#
# Many different objects can be specified with the following syntax:
#		plane	{ x y z  nX nY nZ  height  width }
#			- "x y z" 				= the position of the plane
#			- "nX nY nZ" 			= the normal of the plane 
#						 			= the plane will be rotated to align with its normal
#			- "height  width" 		= the height and width of the plane
#		sphere	{ x y z  r }
#			- "x y z" 				= the position of the sphere
#			- "r"					= the radius of the sphere
#		cube	{ x y z  height  width  depth }  ** NOT YET IMPLEMENTED **
#			- "x y z"				= the position of the cube
#			- "height width depth"	= Specifies the dimensions of the cube
#		static_mesh { x y z... }
#			- "x y z..."			= the position of the mesh
#									= multiple positions can be specified for instanced rendering
#
# ============================================================
# Attributes
#
# For any object, additional attributes can be given in-line to specify additional
#	aspects of an object. Those that can't be used for an object will be ignored.
#
#		+material	{ <diffuse map location> <*specular map location*> S }
#			- specifies a texture to use for the object.
#			- <diffuse map location> 	= specifies a texture to use as a diffuse map for the object
#			- <*specular map location*>	= (Optional) specifies a texture to use as a specular map.
#										= (Optional) if specified as 3 floats, a texture of that shade will be generated.
#			- S							= specifies the shininess of the material
#		+mesh		{ <mesh location>  s }
#			- specifies a mesh .obj that will be loaded for the object
#			- if a mesh is expected, but no mesh is given, a cube will be used as default.
#			- "s"					= the scale of the mesh *Optional: Default is 1.0f*
#		+shader		{ <shader type> }
#			- These are application specific and types are specified in
#				ShaderManager.cpp.
#			- if shader type is incorrect, or shader not specified, a simple
#				diffuse shader will be used (PLANE_SHADER internally).
#			- TODO: list valid <shader type> inputs here.
# ============================================================

directional_light {
	-1 -1 -1
	0 0 0
	0.1960784313725490196078431372549 0.1960784313725490196078431372549 0.58823529411764705882352941176471
	0.1960784313725490196078431372549 0.1960784313725490196078431372549 0.58823529411764705882352941176471
}

spotlight {
	0 6 0
	0 -1 0
	1 1 1
	25.0
	10.0
}

point_light {
	7.5 0 0
	0.0 1.0 1.0
	5.0
}

point_light {
	-7.5 0 0
	1.0 0.0 0.0
	5.0
}

point_light {
	0 0 7.5
	0.0 0.0 1.0
	5.0
}

point_light {
  0 0 -7.5
  1.0 1.0 1.0
  5.0
}

#Indices:
#		0 - Num_Boids
#		1 - Avoid Radius
#		2 - Cohesion Radius
#		3 - Gather Radius
#		4 - Min Speed (length)
#		5 - Max Speed (length)
#		6 - Boundary Radius
#		7 - Delta T
#		8 - Scale
#		9 - Texture Location (Optional)
#		10 - Mesh Location (Optional)
#boids {
#	10000
#	0.5 1.0 1.50
#	5.0 8.0
#	30.0 0.0005 1.0
#	textures-256-256/fig-10c.png
#	models/paper_airplane.obj
#}

# box
## bottom
plane {
	0 -2 0
	0 1 0
	40 40
	+material {
		textures/groundSeamless.jpg
		0 0 0
		0
	}
	+shader {
		plane_shdr
	}
}
## Side 1
#plane {
#	0 0 0
#	1.0 0.0 -1.0
#	1.0 1.0 -1.0
#	1.0 0.0 1.0
#	1.0 1.0 1.0
#	0
#}
## Side 2
#plane {
#	0 0 0
#	-1.0 0.0 -1.0
#	-1.0 0.0 1.0
#	-1.0 1.0 -1.0
#	-1.0 1.0 1.0
#	0
#}
## Side 3
#plane {
#	0 0 0
#	-1.0 1.0 -1.0
#	1.0 1.0 -1.0
#	-1.0 0.0 -1.0
#	1.0 0.0 -1.0
#	0
#}
## side 4
#plane {
#	0 0 0
#	-1.0 1.0 1.0
#	-1.0 0.0 1.0
#	1.0 1.0 1.0
#	1.0 0.0 1.0
#	0
#}
# Top
#plane {
#	0 0 0
#	-1.0 1.0 -1.0
#	-1.0 1.0 1.0
#	1.0 1.0 -1.0
#	1.0 1.0 1.0
#	1
#}

# Mesh
player {
	0 0 0
	+mesh {
		models/big_dodge.obj
		0.25
	}
	+material {
		textures/tronBase.png
		0.1 0.1 0.1
		20.0
	}	
	+shader {
		blinn_phong_shdr
	}
}

static_mesh {
	0 0 10
	0 10 0
	10 0 0
	10 10 0
	10 0 10
	0 10 10
	10 10 10
	+mesh {
		models/bunny.obj
		5.0
	}
	+material {
		textures/fig-7c.png
		0.0
	}
	+shader {
		toon_shdr
	}
}

sphere {
	4 4 0 .5
	+material {
		textures/nightSpherical.jpg
		textures/nightSphericalSpecMap.png
		100.0
	}
}
